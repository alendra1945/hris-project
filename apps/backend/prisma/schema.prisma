// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Gender {
  MALE
  FEMALE
}

enum TicketAcountType {
  OWNER
  REVIEWER
}

model Account {
  id                  String               @id @default(uuid())
  avatarUrl           String               @db.Text
  email               String               @unique
  password            String               @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                Role                 @default(SUBACCOUNT_USER)
  isActive            Boolean              @default(false)
  permissions         Permissions[]
  pipeline            Pipeline[]
  ticket              Ticket[]
  ticketAccount       TicketAccount[]
  EmployeeInformation EmployeeInformation?
  Notification        Notification[]
  Trigger             Trigger[]
  Automation          Automation[]
}

model Permissions {
  id         String   @id @default(uuid())
  email      String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  account    Account  @relation(fields: [email], references: [email], onDelete: Cascade)
  accountId  String?
  access     Boolean

  @@index([accountId])
  @@index([email])
}

model Pipeline {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       Account       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  lane        Lane[]
  permissions Permissions[]

  @@index([ownerId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?

  Tags      Tag[]
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  @@index([laneId])
}

model TicketAccount {
  id          String           @id @default(uuid())
  ticketId    String
  accountId   String
  accountType TicketAcountType @default(OWNER)
  account     Account          @relation(fields: [accountId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([ticketId])
  @@index([accountId])
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pipelineId String

  Ticket Ticket[]

  @@index([pipelineId])
}

model TicketTag {
  id        String   @id @default(uuid())
  ticketId  String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
  @@index([tagId])
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LEFT
}

model EmployeeInformation {
  id             String          @id @default(uuid())
  employeeNumber String          @unique @default("")
  firstName      String          @default("")
  lastName       String          @default("")
  birthDate      DateTime?
  phoneNumber    String          @default("")
  companyEmail   String          @default("")
  gender         Gender
  address        String          @default("") @db.Text
  dateOfJoining  DateTime?
  branch         String?         @default("")
  department     String?         @default("")
  status         EmployeeStatus? @default(ACTIVE)
  account        Account?        @relation(fields: [accountId], references: [id], onDelete: NoAction)
  accountId      String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum LeaveType {
  CASUAL
  COMPENSATORY
  LEAVE_WITHOUT_PAY
  PRIVILEGE
  SICK
}

enum LeaveStatus {
  OPEN
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveApplication {
  id                  String      @id @default(uuid())
  employeeNumber      String      @default("")
  employeeName        String      @default("")
  employeeEmail       String      @default("")
  leaveApproverNumber String      @default("")
  leaveApproverName   String      @default("")
  leaveApproverEmail  String      @default("")
  leaveType           LeaveType   @default(CASUAL)
  startDate           DateTime    @default(now())
  endDate             DateTime    @default(now())
  reason              String      @default("")
  isHalfDay           Boolean     @default(false)
  followViaEmail      Boolean     @default(false)
  status              LeaveStatus @default(OPEN)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model ReportTemplate {
  id             String   @id @default(uuid())
  name           String
  description    String?
  source         String
  metadata       Json?
  documentTarget String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id          String       @id @default(uuid())
  name        String
  type        TriggerTypes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  accountId   String
  account     Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Automations Automation[]

  @@index([accountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  accountId          String?
  Account            Account?             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Actions            Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([accountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_LEAVE_APPLICATION
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id     String           @id @default(uuid())
  email  String           @unique
  status InvitationStatus @default(PENDING)
  role   Role             @default(SUBACCOUNT_USER)
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  accountId    String

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([accountId])
}
